<script type="text/javascript" src="javascripts/CM1.js"></script>
<script type="text/javascript">
  var CM1 = require('./lib/CM1');

  var Calculations = {
    flight: {
      origin_airport: 'ORD',
      destination_airport: 'LGA',
      airline: 'DL',
      trips: 2,
      seat_class: 'economy',
      // date: '2010-08-10',
      // timeframe: '2010-01-01-2010/12-31' 
    },
    meeting: {
      zip_code: 20001,
      area: 446,
      duration: 10
    },
    fuel_purchase: {
      zip_code: 48915,
      fuel_type: 'Reformulated Motor Gasoline',
      cost: '33.75'
    },
    purchase: {
      date: '2010-07-23',
      merchant: 'Staples',
      merchant_category: 5111,
      purchase_amount: '85.22',
      tax: '7.75',
      timeframe: '2010-01-01-2010/12-31' 
    },
    lodging: {
      lodging_class: 'Hotel',
      zip_code: 94102,
      rooms: 1,
      nights: 2
    }
  };
</script>

<div id="header">
  <h1>Greenback</h1>
  <p>What if you could learn your carbon footprint just by looking at your bank statement?</p>
</div>
<div id="content">
  <div class="bill">
    <h2>Monthly statement for Acme Systems, Inc.</h2>
    <p class="timeframe">1 July 2010 &ndash; 1 August 2010</p>
    <ol>
      <li id="flight">
        <dl>
          <dt>Date</dt>
          <dd class="date">7/7/2010</dd>
          <dt>Amount</dt>
          <dd class="amount">$473.13</dd>
          <dt>Description</dt>
          <dd class="description">
            <h3>Delta Airlines</h3>
            <p>7/20/2010 ORD&ndash;LGA R/T DL0123 Economy</p>
          </dd>
          <dt>Estimate URL</dt>
          <dd class="url"></dd>
        </dl>
      </li>
      <li id="meeting">
        <dl>
          <dt>Date</dt>
          <dd class="date">7/11/2010</dd>
          <dt>Amount</dt>
          <dd class="amount">$129.97</dd>
          <dt>Description</dt>
          <dd class="description">
            <h3>Washington Convention Center</h3>
            <p>Rm 143ABC 4800 Sqft 10 hrs</p>
          </dd>
          <dt>Estimate URL</dt>
          <dd class="url"></dd>
        </dl>
      </li>
      <li id="fuel_purchase">
        <dl>
          <dt>Date</dt>
          <dd class="date">7/19/2010</dd>
          <dt>Amount</dt>
          <dd class="amount">$33.75</dd>
          <dt>Description</dt>
          <dd class="description">
            <h3>Exxon-Mobil</h3>
            <p>Gasoline 11.9 gallons</p>
          </dd>
          <dt>Estimate URL</dt>
          <dd class="url"></dd>
        </dl>
      </li>
      <li id="purchase">
        <dl>
          <dt>Date</dt>
          <dd class="date">7/23/2010</dd>
          <dt>Amount</dt>
          <dd class="amount">$85.22</dd>
          <dt>Description</dt>
          <dd class="description">
            <h3>Staples</h3>
            <p>Merchandise $76.70 Sales Tax $8.52</p>
          </dd>
          <dt>Estimate URL</dt>
          <dd class="url"></dd>
        </dl>
      </li>
      <li id="lodging">
        <dl>
          <dt>Date</dt>
          <dd class="date">7/27/2010</dd>
          <dt>Amount</dt>
          <dd class="amount">$374.13</dd>
          <dt>Description</dt>
          <dd class="description">
              <h3>Hilton</h3>
              <p>San Francisco Union Square 7-27-2010 To 7-29-2010</p>
          </dd>
          <dt>Estimate URL</dt>
          <dd class="url"></dd>
        </dl>
      </li>
    </ol>
  </div>
</div>
<div id="footer">
  <div id="kudos">
    <script type="text/javascript" src="http://carbon.brighterplanet.com/badge.js"></script>
  </div>
  <h2>What's going on here?</h2>
  <p>Greenback is a quick demonstration of Prism, Brighter Planet's new purchase footprint web service that uses a set of emissions models to analyze the carbon footprint of producing and using the goods and services you buy. This service helps you make informed decisions by illuminating the environmental cost of all your purchases, from flights and fuel to computers and consulting.</p>
  <h2>Where do these numbers come from?</h2>
  <p>Brighter Planet's carbon models pull energy use, emissions, and economic data from dozens of government, academic, and industry sources to estimate the climate impact of everyday purchases. We take great care to ensure our calculations employ the most authoritative, accurate, up-to-date data and methodologies available.</p>
  <h2>Can I get this with my current bank?</h2>
  <p>No. But we can certainly let you know when you can: shoot us an email at staff@brighterplanet.com.</p>
  <h2>I work for a financial institution. How can I learn more?</h2>
  <p>Contact us at staff@brighterplanet.com to find out how Brighter Planet can help you integrate efficient purchase footprinting into your existing systems.</p>
</div>

<script type="text/javascript">
  var timer;

  document.observe('dom:loaded', function() {
    $$('.bill ol li').each(function(purchase) {
      var link = new Element('a', { 'style': 'cursor: pointer;' }).update('<span>Calculate </span>CO<sub>2</sub>');
      link.observe('click', function(ev) {
        ev.stop();
        var name = purchase.getAttribute('id');
        CM1.impacts(name, Calculations[name], function(err, impacts) {
          if(err && console)
            consoloe.log('Failed to retrieve impacts for',name,err);
          else
            showEstimate(purchase, impacts);
        });
      })
      purchase.insert({ 'top': link}); 
    });
  });

  function showEstimate(purchase, impacts) {
    purchase.down('a').hide();
    timer = new Date().getTime();

    var methodology = new Element('p');
    var methodologyLink = new Element('a', { 'href': impacts.methodology }).update('Methodology');
    var methodologySpan = new Element('span');
    methodology.insert({ 'bottom': methodologySpan });
    methodology.insert({ 'bottom': methodologyLink });
    purchase.insert({ 'top': methodology });
    stopTimer(purchase);

    var pre = new Element('pre');
    pre.appendChild(document.createTextNode(impacts.carbon));
    purchase.insert({ 'top': pre });
  }

  function stopTimer(li) {
    var end = new Date().getTime();
    var seconds = (end - timer) / 1000;
    li.down('p span').update('Calculated remotely in ' + seconds + ' seconds. ');
  }
</script>
